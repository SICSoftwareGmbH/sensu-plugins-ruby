#!/usr/bin/env ruby
#
#   check-bundle-audit
#
# DESCRIPTION:
#   Check bundle for vulnerabilities
#
# OUTPUT:
#   Plain text
#
# PLATFORMS:
#   Linux; bundler-audit gem must be installed
#
# DEPENDENCIES:
#   gem: sensu-plugin
#   gem: bundler-audit
#
# LICENSE:
#   SIC! Software GmbH <info@sic.software>
#   Released under the same terms as Sensu (the MIT license); see LICENSE
#   for details.
#

require 'bundler/audit/database'
require 'bundler/audit/scanner'
require 'sensu-plugin/check/cli'

# Sensu plugin for checking bundle audit status
class BundlerAuditCheck < Sensu::Plugin::Check::CLI
  CRITICALITY_UNKOWN = 0
  CRITICALITY_LOW    = 1
  CRITICALITY_MEDIUM = 2
  CRITICALITY_HIGH   = 3

  option :paths,
         short: '-p RUBY_APP_PATHS',
         long: '--paths RUBY_APP_PATHS',
         description: 'Comma separated list of paths containing ruby applications',
         required: true

  option :criticality,
         short: '-c CRIT_NUM',
         long: '--criticality CRIT_NUM',
         description: 'Ignore vulnerabilities with lower criticality than this',
         default: '0'

  option :ignore,
         short: '-i CVE_NUBMERS',
         long: '--ignore CVE_NUMBERS',
         description: 'Comma separated list of CVE numbers to ignore',
         default: ''

  def run
    update_audit_db

    checks, message = check_results

    if checks.any? { |c| c[:status] == :critical }
      critical("Vulnerabilities found: #{message}")
    elsif checks.any? { |c| c[:status] == :warning }
      warning("Vulnerabilities found: #{message}")
    else
      ok('No vulnerabilities found')
    end
  end

  private

  def update_audit_db
    ok = Bundler::Audit::Database.update!(quiet: true)

    warning('Failed to update advisory db') unless ok
  end

  def check_results
    checks = config[:paths].split(',').map do |path|
      check_audit(path.strip)
    end

    message = checks.select { |c| %i[critical warning].include?(c[:status]) }
                    .map { |c| "#{c[:path]}: #{c[:message]}" }
                    .compact.join("\n")

    [checks, message]
  end

  def criticality_to_int(criticality)
    case criticality
    when :high
      CRITICALITY_HIGH
    when :medium
      CRITICALITY_MEDIUM
    when :low
      CRITICALITY_LOW
    else
      CRITICALITY_UNKOWN
    end
  end

  def vulnerabilities_for_path(path)
    ENV['BUNDLE_GEMFILE'] = File.join(path, 'Gemfile.lock')

    vulnerabilities = []

    scanner = Bundler::Audit::Scanner.new(path)
    scanner.scan do |result|
      case result
      when Bundler::Audit::Scanner::InsecureSource
        vulnerabilities << { message: "Insecure Source URI found: #{result.source}", criticality: CRITICALITY_HIGH }
      when Bundler::Audit::Scanner::UnpatchedGem
        vulnerabilities << {
          gem: result.gem,
          advisory: result.advisory,
          criticality: criticality_to_int(result.advisory.criticality)
        }
      end
    end

    vulnerabilities
  end

  def message_for_vulnerabilities(vulnerabilities)
    return 'No vulnerabilities found' if vulnerabilities.empty?

    vulnerabilities.map do |v|
      v[:message] || "#{v[:gem].name} #{v[:gem].version} (#{v[:advisory].cve || v[:advisory].osvdb})"
    end.join(', ')
  end

  def ignore?(vulnerability)
    config[:ignore].split(',').map(&:strip).include?(vulnerability[:advisory])
  end

  def check_audit(path)
    vulnerabilities = vulnerabilities_for_path(path)
    message = message_for_vulnerabilities(vulnerabilities)

    if vulnerabilities.empty?
      { path: path, status: :ok, message: message }
    elsif vulnerabilities.any? { |v| v[:criticality] >= config[:criticality].to_i && !ignore?(v) }
      { path: path, status: :critical, message: message }
    else
      { path: path, status: :ok, message: message }
    end
  rescue StandardError => e
    { path: path, status: :warning, message: "Failed to check for vulnerabilities: #{e.message}" }
  end
end
